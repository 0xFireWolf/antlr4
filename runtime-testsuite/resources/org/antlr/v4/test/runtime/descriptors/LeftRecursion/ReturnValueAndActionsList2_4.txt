[type]
Parser

[grammar]
grammar T;
s @after {<ToStringTree("$ctx"):writeln()>} : expr EOF;
expr:
    a=expr '*' a=expr #Factor
    | b+=expr ',' b+=expr #Comma
    | b+=expr '>>' c=expr #Send
    | ID #JustId //semantic check on modifiers
   ;
ID  : ('a'..'z'|'A'..'Z'|'_')
      ('a'..'z'|'A'..'Z'|'0'..'9'|'_')*
;
WS : [ \t\n]+ -> skip ;

[start]
s

[input]
a*b,c,x*y>>r

[output]
"""(s (expr (expr (expr (expr (expr a) * (expr b)) , (expr c)) , (expr (expr x) * (expr y))) >> (expr r)) <EOF>)
"""

